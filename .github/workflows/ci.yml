name: AEGIS CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - "**.md"
      - "docs/**"
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - "**.md"
      - "docs/**"
  workflow_dispatch:

env:
  GO_VERSION: "1.21"
  NODE_VERSION: "20"
  DOCKER_REPO: "ghcr.io/kurs-24-06/aegis"

jobs:
  validate:
    name: Validate Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set version
        run: |
          echo "VERSION=$(git describe --tags --always --dirty || echo 'v0.0.0-dev')" >> $GITHUB_ENV
          echo "Building version: $VERSION"

      - name: Validate project structure
        run: |
          if [ ! -d "backend" ]; then
            echo "Error: backend directory not found"
            exit 1
          fi
          if [ ! -d "frontend" ]; then
            echo "Error: frontend directory not found"
            exit 1
          fi

  backend-checks:
    name: Backend Code Checks
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Initialize Go module if needed
        run: |
          cd backend
          if [ ! -f "go.mod" ]; then
            go mod init github.com/Kurs-24-06/aegis/backend
            go mod tidy
          fi

      - name: Verify dependencies
        run: cd backend && go mod verify

      - name: Install golangci-lint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Lint Go code
        run: cd backend && golangci-lint run ./... --timeout=5m

  frontend-checks:
    name: Frontend Code Checks
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: cd frontend && npm ci

      - name: Check for lint script
        id: check-lint
        run: |
          cd frontend
          if grep -q '"lint":' package.json; then
            echo "has_lint=true" >> $GITHUB_OUTPUT
          else
            echo "has_lint=false" >> $GITHUB_OUTPUT
          fi

      - name: Run linting
        if: steps.check-lint.outputs.has_lint == 'true'
        run: cd frontend && npm run lint

  backend-tests:
    name: Backend Tests
    needs: backend-checks
    runs-on: ubuntu-latest
    services:
      # Test-Datenbank für Integrationstests
      postgres:
        image: timescale/timescaledb:latest-pg14
        env:
          POSTGRES_USER: aegisuser
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: aegis_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Redis für Integrationstests
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: cd backend && go mod download

      - name: Create test config
        run: |
          mkdir -p backend/config
          cat > backend/config/config.test.yaml << EOF
          server:
            port: 8081
            debug: true
            cors:
              allowed_origins: ["*"]
              allowed_methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
              allowed_headers: ["Authorization", "Content-Type"]
              
          database:
            type: "postgres"
            host: "localhost"
            port: 5432
            user: "aegisuser"
            password: "test_password"
            name: "aegis_test"
            sslMode: "disable"
            
          redis:
            host: "localhost"
            port: 6379
            password: ""
            
          simulation:
            worker_count: 2
            buffer_size: 1000
            default_timeout_seconds: 30
            
          logging:
            level: "error"
            format: "text"
            
          auth:
            enabled: true
            jwt_secret: "test-secret-key"
            token_expiry: "1h"
          EOF

      - name: Create test script
        run: |
          mkdir -p backend/scripts
          cat > backend/scripts/run-tests.sh << 'EOF'
          #!/bin/bash
          set -e

          # Get script directory
          SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
          ROOT_DIR="$(dirname "$SCRIPT_DIR")"

          # Define colors for output
          GREEN='\033[0;32m'
          RED='\033[0;31m'
          YELLOW='\033[0;33m'
          NC='\033[0m' # No Color

          echo -e "${YELLOW}Running Go tests for AEGIS backend...${NC}"

          # Set test environment
          export ENVIRONMENT="test"

          # Run tests with race detection and coverage
          go test -race -coverprofile=coverage.txt -covermode=atomic ./...

          # Generate HTML coverage report
          go tool cover -html=coverage.txt -o coverage.html

          # Check if integration tests are requested
          if [ "$1" == "--integration" ]; then
            echo -e "${YELLOW}Running integration tests...${NC}"
            go test -tags=integration ./tests/integration/...
          fi

          echo -e "${GREEN}Tests completed successfully!${NC}"
          EOF
          chmod +x backend/scripts/run-tests.sh

      - name: Run unit tests
        run: cd backend && ./scripts/run-tests.sh

      - name: Create integration test directory
        run: mkdir -p backend/tests/integration

      - name: Run integration tests
        run: |
          # Only run if integration test directory is not empty
          if [ "$(ls -A backend/tests/integration 2>/dev/null)" ]; then
            cd backend && ./scripts/run-tests.sh --integration
          else
            echo "No integration tests found, skipping"
          fi

      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage
          path: backend/coverage.html

  frontend-tests:
    name: Frontend Tests
    needs: frontend-checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: cd frontend && npm ci

      - name: Set up Jest configuration
        run: |
          cd frontend
          # Installiere Jest-Abhängigkeiten, falls noch nicht vorhanden
          npm install --save-dev jest jest-preset-angular @types/jest jest-junit @testing-library/angular @testing-library/jest-dom

          # Erstelle Jest-Konfiguration, falls noch nicht vorhanden
          if [ ! -f "jest.config.js" ]; then
            cat > jest.config.js << 'EOF'
          module.exports = {
            preset: 'jest-preset-angular',
            setupFilesAfterEnv: ['<rootDir>/setup-jest.ts'],
            globalSetup: 'jest-preset-angular/global-setup',
            testPathIgnorePatterns: [
              '<rootDir>/node_modules/',
              '<rootDir>/dist/',
              '<rootDir>/e2e/'
            ],
            coverageDirectory: '<rootDir>/coverage/frontend',
            coverageReporters: ['json', 'lcov', 'text', 'clover', 'html'],
            moduleNameMapper: {
              '^@app/(.*)$': '<rootDir>/src/app/$1',
              '^@core/(.*)$': '<rootDir>/src/app/core/$1',
              '^@shared/(.*)$': '<rootDir>/src/app/shared/$1',
              '^@env/(.*)$': '<rootDir>/src/environments/$1'
            },
            reporters: [
              'default',
              ['jest-junit', {
                outputDirectory: './coverage/frontend',
                outputName: 'junit.xml'
              }]
            ]
          };
          EOF
          fi

          # Erstelle Jest-Setup-Datei, falls noch nicht vorhanden
          if [ ! -f "setup-jest.ts" ]; then
            cat > setup-jest.ts << 'EOF'
          import 'jest-preset-angular/setup-jest';
          import '@testing-library/jest-dom';

          // Global mocks for tests
          Object.defineProperty(window, 'CSS', { value: null });
          Object.defineProperty(window, 'getComputedStyle', {
            value: () => ({
              display: 'none',
              appearance: ['-webkit-appearance'],
              getPropertyValue: (prop: any) => ''
            })
          });

          Object.defineProperty(document, 'doctype', {
            value: '<!DOCTYPE html>'
          });

          Object.defineProperty(document.body.style, 'transform', {
            value: () => ({
              enumerable: true,
              configurable: true
            })
          });
          EOF
          fi

          # Package.json anpassen falls nötig
          if ! grep -q '"test":.*jest' package.json; then
            # Backup erstellen
            cp package.json package.json.bak
            
            # Test-Skript hinzufügen/ersetzen
            sed -i 's/"test": ".*"/"test": "jest"/' package.json || sed -i 's/"test": ".*"/"test": "jest"/' package.json
            
            # Falls sed fehlschlägt, Backup wiederherstellen
            if [ $? -ne 0 ]; then
              echo "Failed to update package.json, restoring backup"
              mv package.json.bak package.json
            else
              rm package.json.bak
            fi
          fi

      - name: Run unit tests
        run: cd frontend && npm test -- --ci

      - name: Set up Cypress
        run: |
          cd frontend
          npm install --save-dev cypress @cypress/code-coverage

          # Erstelle Cypress-Konfiguration
          cat > cypress.config.ts << 'EOF'
          import { defineConfig } from 'cypress';

          export default defineConfig({
            e2e: {
              baseUrl: 'http://localhost:4200',
              specPattern: 'cypress/e2e/**/*.cy.{js,jsx,ts,tsx}',
              supportFile: 'cypress/support/e2e.ts',
              videosFolder: 'cypress/videos',
              screenshotsFolder: 'cypress/screenshots'
            }
          });
          EOF

          # Erstelle Cypress-Verzeichnisstruktur
          mkdir -p cypress/e2e cypress/support cypress/fixtures

          # Erstelle Support-Dateien
          echo "// ***********************************************************
          // This support file configures the e2e testing environment
          // ***********************************************************

          import './commands';" > cypress/support/e2e.ts

          echo "// Add custom Cypress commands here" > cypress/support/commands.ts

          # Beispiel-Testdatei erstellen
          mkdir -p cypress/e2e/smoke
          echo "describe('Smoke Test', () => {
            it('should load the application', () => {
              cy.visit('/');
              cy.contains('AEGIS');
            });
          });" > cypress/e2e/smoke/app.cy.ts

          # Package.json für Cypress anpassen
          if ! grep -q '"cypress:run"' package.json; then
            # Backup erstellen
            cp package.json package.json.bak
            
            # Vor dem letzten schließenden Klammer einfügen
            sed -i 's/}$/,\n  "cypress:run": "cypress run",\n  "cypress:open": "cypress open"\n}/' package.json || sed -i 's/}$/,\n  "cypress:run": "cypress run",\n  "cypress:open": "cypress open"\n}/' package.json
            
            # Falls sed fehlschlägt, Backup wiederherstellen
            if [ $? -ne 0 ]; then
              echo "Failed to update package.json, restoring backup"
              mv package.json.bak package.json
            else
              rm package.json.bak
            fi
          fi

      - name: Build for E2E tests
        run: cd frontend && npm run build

      - name: Install static server
        run: npm install -g serve

      - name: Start frontend in background
        run: |
          cd frontend
          serve -s dist/frontend/browser -l 4200 &
          echo $! > .serverpid
          echo "Waiting for server to start..."
          sleep 5

      - name: Run Cypress tests
        run: cd frontend && npm run cypress:run || true

      - name: Stop frontend server
        run: |
          cd frontend
          if [ -f .serverpid ]; then
            kill $(cat .serverpid) || true
            rm .serverpid
          fi

      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: frontend-coverage
          path: |
            frontend/coverage
            frontend/cypress/screenshots
            frontend/cypress/videos

  security-scan:
    name: Security Scan
    needs: [backend-tests, frontend-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "AEGIS"
          path: "."
          format: "HTML"
          out: "reports"
          args: >
            --scan frontend/
            --scan backend/
            --failOnCVSS 7

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: reports

  build:
    name: Build Artifacts
    needs: [backend-tests, frontend-tests, security-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set version
        run: echo "VERSION=$(git describe --tags --always --dirty || echo 'v0.0.0-dev')" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Build backend with version info
        run: |
          cd backend
          if [ -f "go.mod" ]; then
            go build -ldflags="-s -w -X main.version=${VERSION}" -v -o ../bin/aegis ./cmd
          else
            go mod init github.com/Kurs-24-06/aegis/backend
            go mod tidy
            go build -ldflags="-s -w -X main.version=${VERSION}" -v -o ../bin/aegis ./cmd
          fi

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build -- --configuration=production
          echo "$VERSION" > dist/frontend/browser/version.txt

      - name: Package artifacts
        run: |
          mkdir -p dist
          mkdir -p dist/bin
          cp -r bin/aegis dist/bin/
          cp -r frontend/dist/frontend dist/
          cp -r infra dist/infra
          echo "$VERSION" > dist/version.txt
          tar -czf aegis-$VERSION.tar.gz dist

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: aegis-build
          path: aegis-${{ env.VERSION }}.tar.gz
          retention-days: 7

  docker:
    name: Build Docker Images
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set version
        run: echo "VERSION=$(git describe --tags --always --dirty || echo 'v0.0.0-dev')" >> $GITHUB_ENV

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: aegis-build
          path: .

      - name: Extract artifacts
        run: tar -xzf aegis-${{ env.VERSION }}.tar.gz

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine environment tag
        id: env-tag
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENV_TAG=latest" >> $GITHUB_OUTPUT
          else
            echo "ENV_TAG=develop" >> $GITHUB_OUTPUT
          fi

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: backend
          file: backend/Dockerfile
          push: true
          build-args: |
            VERSION=${{ env.VERSION }}
          tags: |
            ${{ env.DOCKER_REPO }}/aegis-backend:${{ env.VERSION }}
            ${{ env.DOCKER_REPO }}/aegis-backend:${{ steps.env-tag.outputs.ENV_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: frontend
          file: frontend/Dockerfile
          push: true
          build-args: |
            VERSION=${{ env.VERSION }}
          tags: |
            ${{ env.DOCKER_REPO }}/aegis-frontend:${{ env.VERSION }}
            ${{ env.DOCKER_REPO }}/aegis-frontend:${{ steps.env-tag.outputs.ENV_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-aws:
    name: Deploy to AWS
    needs: docker
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    #environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.5

      - name: Terraform Init
        run: |
          cd infra/aws
          terraform init

      - name: Terraform Plan
        run: |
          cd infra/aws
          terraform plan -out=tfplan

      - name: Terraform Apply
        run: |
          cd infra/aws
          terraform apply -auto-approve tfplan

      - name: Update deployment status
        run: |
          echo "AWS deployment completed at $(date)"
          echo "Environment: Production"
          echo "Version: $(git rev-parse --short HEAD)"

  deploy-azure:
    name: Deploy to Azure
    needs: docker
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    #environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.5

      - name: Terraform Init
        run: |
          cd infra/azure
          terraform init

      - name: Terraform Plan
        run: |
          cd infra/azure
          terraform plan -out=tfplan

      - name: Terraform Apply
        run: |
          cd infra/azure
          terraform apply -auto-approve tfplan

      - name: Update deployment status
        run: |
          echo "Azure deployment completed at $(date)"
          echo "Environment: Production"
          echo "Version: $(git rev-parse --short HEAD)"

  notify:
    name: Notification
    needs: [deploy-aws, deploy-azure]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: aegis-deployments
          SLACK_TITLE: AEGIS Deployment Status
          SLACK_MESSAGE: |
            Deployment Status:
            AWS: ${{ needs.deploy-aws.result }}
            Azure: ${{ needs.deploy-azure.result }}
            Commit: ${{ github.event.head_commit.message }}
          SLACK_COLOR: ${{ needs.deploy-aws.result == 'success' && needs.deploy-azure.result == 'success' && 'good' || 'danger' }}

  publish-reports:
    name: Publish Test Reports
    needs: [backend-tests, frontend-tests, security-scan]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: all-artifacts

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v3

      - name: Prepare reports directory
        run: |
          mkdir -p reports/coverage/backend
          mkdir -p reports/coverage/frontend
          mkdir -p reports/security
          mkdir -p reports/cypress

          # Copy Backend coverage
          if [ -d "all-artifacts/backend-coverage" ]; then
            cp -r all-artifacts/backend-coverage/* reports/coverage/backend/
          fi

          # Copy Frontend coverage
          if [ -d "all-artifacts/frontend-coverage/coverage" ]; then
            cp -r all-artifacts/frontend-coverage/coverage/* reports/coverage/frontend/
          fi

          # Copy Cypress artifacts
          if [ -d "all-artifacts/frontend-coverage/cypress" ]; then
            cp -r all-artifacts/frontend-coverage/cypress/screenshots reports/cypress/ || true
            cp -r all-artifacts/frontend-coverage/cypress/videos reports/cypress/ || true
          fi

          # Copy security reports
          if [ -d "all-artifacts/security-report" ]; then
            cp -r all-artifacts/security-report/* reports/security/
          fi

          # Create index.html
          cat > reports/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>AEGIS Test Reports</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 0; padding: 20px; line-height: 1.6; }
              .container { max-width: 1000px; margin: 0 auto; }
              h1 { color: #333; border-bottom: 1px solid #eee; padding-bottom: 10px; }
              h2 { color: #444; margin-top: 30px; }
              ul { padding-left: 20px; }
              li { margin-bottom: 8px; }
              a { color: #0366d6; text-decoration: none; }
              a:hover { text-decoration: underline; }
              .build-info { background: #f6f8fa; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>AEGIS Test Reports</h1>
              
              <div class="build-info">
                <p><strong>Build Date:</strong> $(date)</p>
                <p><strong>Commit:</strong> $(git rev-parse --short HEAD || echo "Unknown")</p>
                <p><strong>Branch:</strong> ${{ github.ref_name }}</p>
              </div>
              
              <h2>Coverage Reports</h2>
              <ul>
                <li><a href="./coverage/backend/coverage.html">Backend Coverage</a></li>
                <li><a href="./coverage/frontend/index.html">Frontend Coverage</a></li>
              </ul>
              
              <h2>Cypress Reports</h2>
              <ul>
                <li><a href="./cypress/screenshots/">Screenshots</a></li>
                <li><a href="./cypress/videos/">Videos</a></li>
              </ul>
              
              <h2>Security Reports</h2>
              <ul>
                <li><a href="./security/dependency-check-report.html">Dependency Check Report</a></li>
              </ul>
            </div>
          </body>
          </html>
          EOF

      - name: Upload artifact for deployment
        uses: actions/upload-pages-artifact@v2
        with:
          path: "reports"

      - name: Deploy to GitHub Pages
        id: deployment
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        uses: actions/deploy-pages@v2
