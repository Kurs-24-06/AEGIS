version: '3.8'

# AEGIS Docker Compose Konfiguration mit umgebungsspezifischen Einstellungen
# Unterst체tzt Entwicklung (dev), Staging und Produktion (prod)

services:
  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: ${ENV:-dev}.Dockerfile
      args:
        - VERSION=${VERSION:-0.0.0-dev}
        - BUILD_ENV=${ENV:-dev}
    image: ${DOCKER_REPO:-aegis}/aegis-frontend:${VERSION:-latest}
    ports:
      - "${FRONTEND_PORT:-4200}:80"
    volumes:
      - ${ENV:-dev} == "dev" ? ./frontend:/app : []
      - ${ENV:-dev} == "dev" ? /app/node_modules : []
    environment:
      - NODE_ENV=${ENV:-development}
    depends_on:
      - backend
    networks:
      - aegis-network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: ${FRONTEND_MEMORY_LIMIT:-512M}
        reservations:
          memory: ${FRONTEND_MEMORY_RESERVATION:-256M}

  # Backend service  
  backend:
    build:
      context: ./backend
      dockerfile: ${ENV:-dev}.Dockerfile
      args:
        - VERSION=${VERSION:-0.0.0-dev}
        - BUILD_ENV=${ENV:-dev}
        - BUILD_DATE=${BUILD_DATE:-unknown}
        - GIT_COMMIT=${GIT_COMMIT:-unknown}
    image: ${DOCKER_REPO:-aegis}/aegis-backend:${VERSION:-latest}
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    volumes:
      - ${ENV:-dev} == "dev" ? ./backend:/app : []
      - ${ENV:-dev} == "dev" ? /app/go/pkg/mod : []
      - backend-data:/app/data
      - backend-logs:/app/logs
    environment:
      - ENVIRONMENT=${ENV:-development}
      # Datenbankeinstellungen
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_USER=${DB_USER:-aegisuser}
      - DB_PASSWORD=${DB_PASSWORD:-${ENV:-dev}_password}
      - DB_NAME=${DB_NAME:-aegis_${ENV:-dev}}
      # Redis-Einstellungen
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      # Sicherheitseinstellungen
      - JWT_SECRET=${JWT_SECRET:-${ENV:-dev}_jwt_secret}
      - TOKEN_EXPIRY=${TOKEN_EXPIRY:-24h}
      # Logging-Einstellungen
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-${ENV:-dev} == "dev" ? "text" : "json"}
      # Simulations-Einstellungen
      - SIMULATION_WORKERS=${SIMULATION_WORKERS:-${ENV:-dev} == "prod" ? 8 : ${ENV:-dev} == "staging" ? 4 : 2}
      - SIMULATION_BUFFER=${SIMULATION_BUFFER:-${ENV:-dev} == "prod" ? 10000 : ${ENV:-dev} == "staging" ? 5000 : 1000}
      - SIMULATION_TIMEOUT=${SIMULATION_TIMEOUT:-${ENV:-dev} == "prod" ? 900 : ${ENV:-dev} == "staging" ? 600 : 300}
    depends_on:
      - postgres
      - redis
    networks:
      - aegis-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: ${BACKEND_CPU_LIMIT:-${ENV:-dev} == "prod" ? "1.0" : "0.5"}
          memory: ${BACKEND_MEMORY_LIMIT:-${ENV:-dev} == "prod" ? "1G" : "512M"}
        reservations:
          memory: ${BACKEND_MEMORY_RESERVATION:-256M}

  # PostgreSQL with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg14
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_USER=${DB_USER:-aegisuser}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-${ENV:-dev}_password}
      - POSTGRES_DB=${DB_NAME:-aegis_${ENV:-dev}}
      - TIMESCALEDB_TELEMETRY=off
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db:/docker-entrypoint-initdb.d
    networks:
      - aegis-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-aegisuser} -d ${DB_NAME:-aegis_${ENV:-dev}}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: ${POSTGRES_MEMORY_LIMIT:-${ENV:-dev} == "prod" ? "2G" : "1G"}

  # Redis for caching and pub/sub
  redis:
    image: redis:alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: >
      redis-server 
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-}
      --maxmemory ${REDIS_MAXMEMORY:-${ENV:-dev} == "prod" ? "1gb" : "256mb"}
      --maxmemory-policy ${REDIS_MAXMEMORY_POLICY:-allkeys-lru}
    volumes:
      - redis-data:/data
    networks:
      - aegis-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: ${REDIS_MEMORY_LIMIT:-${ENV:-dev} == "prod" ? "1.5G" : "512M"}

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./infra/prometheus/${ENV:-dev}/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION:-${ENV:-dev} == "prod" ? "15d" : "5d"}'
    networks:
      - aegis-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: ${PROMETHEUS_MEMORY_LIMIT:-${ENV:-dev} == "prod" ? "1G" : "512M"}

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-${ENV:-dev} == "prod" ? "${GRAFANA_ADMIN_SECRET}" : "admin"}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=${GRAFANA_ROOT_URL:-${ENV:-dev} == "prod" ? "https://grafana.aegis-security.com" : "http://localhost:3000"}
      - GF_INSTALL_PLUGINS=${GRAFANA_PLUGINS:-grafana-clock-panel,grafana-worldmap-panel}
    volumes:
      - ./infra/grafana/${ENV:-dev}/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - aegis-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: ${GRAFANA_MEMORY_LIMIT:-512M}

  # MinIO S3-compatible object storage for files and artifacts
  minio:
    image: minio/minio:latest
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio-data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-${ENV:-dev} == "prod" ? "${MINIO_ROOT_SECRET}" : "minioadmin"}
      - MINIO_BROWSER=${MINIO_BROWSER:-on}
      - MINIO_PROMETHEUS_AUTH_TYPE=public
    command: server /data --console-address ":9001"
    networks:
      - aegis-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: ${MINIO_MEMORY_LIMIT:-${ENV:-dev} == "prod" ? "1G" : "512M"}

  # F체r die Produktionsumgebung: Zus채tzlicher Traefik Reverse Proxy hinzuf체gen
  traefik:
    image: traefik:v2.9
    command:
      - "--api.insecure=${TRAEFIK_API_INSECURE:-${ENV:-dev} == "prod" ? "false" : "true"}"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=${TRAEFIK_ACME_EMAIL:-admin@aegis-security.com}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "${TRAEFIK_DASHBOARD_PORT:-${ENV:-dev} == "prod" ? "8888" : "8080"}:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-data:/letsencrypt
    networks:
      - aegis-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: ${TRAEFIK_MEMORY_LIMIT:-256M}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.middlewares=traefik-auth"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_BASIC_AUTH:-admin:$$apr1$$default$$hashedpassword}"

networks:
  aegis-network:
    driver: bridge

volumes:
  postgres-data:
    name: "${ENV:-dev}-postgres-data"
  redis-data:
    name: "${ENV:-dev}-redis-data"
  prometheus-data:
    name: "${ENV:-dev}-prometheus-data"
  grafana-data:
    name: "${ENV:-dev}-grafana-data"
  minio-data:
    name: "${ENV:-dev}-minio-data"
  backend-data:
    name: "${ENV:-dev}-backend-data"
  backend-logs:
    name: "${ENV:-dev}-backend-logs"
  traefik-data:
    name: "${ENV:-dev}-traefik-data"